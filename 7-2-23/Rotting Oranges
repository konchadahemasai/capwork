class Solution {
    public int orangesRotting(int[][] grid) {
        class pair{
            int row;
            int col;
            int time;
            pair(int row,int col,int time){
                this.row=row;
                this.col=col;
                this.time=time;
            }
        }
        
        int rows=grid.length;
        int cols=grid[0].length;
        Queue<pair> q=new LinkedList<>();
        int[][] visited=new int[rows][cols];
        int count=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.add(new pair(i,j,0));
                    visited[i][j]=2;
                }
                else
                    visited[i][j]=0;
                if(grid[i][j]==1)
                    count++;
            }
        }
        int time=0;
        int offsetx[]={-1,0,1,0};
        int offsety[]={0,1,0,-1};
        int count1=0;
        while(!q.isEmpty()){
            
            int r=q.peek().row;
            int c=q.peek().col;
            int t=q.peek().time;
            time=Math.max(time,t);
            q.remove();
            for(int i=0;i<4;i++){
                int nextr=r+offsetx[i];
                int nextc=c+offsety[i];
                if(nextr>=0 && nextr<rows && nextc>=0 && nextc<cols && 
                   visited[nextr][nextc]==0 && grid[nextr][nextc]==1 ){
                    
                    q.add(new pair(nextr,nextc,t+1));
                    visited[nextr][nextc]=2;
                    count1++;
                }
            }
            
        }
        if(count1!=count)
            return -1;
        return time;
        
        
    }
}
